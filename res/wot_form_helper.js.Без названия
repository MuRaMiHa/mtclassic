var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");


if (!window.wot_hl) {
    alert('Please include the file "wot_hl_common.js" before "wot_form_helper.js"');
}

if (!window.wg || !window.wg.dialog) {
    alert('Please include the file "wg_dialogs.js" before "wot_form_helper.js"');
}


var Forms = {
    create: function(method, url, params, target) {
        var form = $('<form>')
            .attr('method', method)
            .attr('action', url);

        if (target) {
            form.attr('target', target);
        }

        $.each(params, function(key, value) {
            $('<input type="hidden">')
                .attr('name', key)
                .attr('value', value)
                .appendTo(form);
        });

        form.appendTo('body');
        return form;
    },
    send: function(method, url, params, target) {
        var form = Forms.create(method, url, params, target);
        form.submit();
    },
    sendGet: function(url, params, target) {
        return Forms.send('GET', url, params, target);
    },
    sendPost: function(url, params, target) {
        return Forms.send('POST', url, params, target);
    }
};


var wot_forms = {

    //-------------------------------
    // Post helper section

    /*
  params:
    success
  */

    auth: function(params) {
        var RELOGIN_FORM_URL = window.RELOGIN_FORM_URL ? window.RELOGIN_FORM_URL : "should be defined like global workspace";
        var submit_params = {
            success: function() {
                // here we have guaranties from the server, that there will be no 600 error
                // (since relogin has successed), so we can close dialog
                params.success();
                $('#js-relogin-form-wrapper').dialog('close');
            },
            iframeProxy: true
        };
        var ext_params = { source: RELOGIN_FORM_URL,
                           OnReady: function(dialog) {
                               jQuery('.js-cancel-button', dialog).click(function(){
                                   if(params.OnCancel) {
                                       params.OnCancel();
                                   }
                               });
                           } };

        wot_forms.submit_from_popup(false, '#js-relogin-form', '#js-relogin-form-wrapper', submit_params, ext_params);
    },

    auth_dialog: function() {
        var LOGIN_FORM_URL = window.LOGIN_FORM_URL ? window.LOGIN_FORM_URL : 'should be defined in global namespace';
        var submit_params = {
            success: function(data) {
                if (data && data.redirect_to) {
                    location.href = data.redirect_to;
                }
                else {
                    setTimeout(function() {
                        location.reload();
                    }, 100);
                }
            },
            error: function(data) {
                if(data.enable_captcha){
                    window.wotCaptcha.Enable();
                    $('.fieldset_captcha').show();
                }
                wg.waiting('close');
            },
            iframeProxy: true
        };
        var ext_params = {
            source: LOGIN_FORM_URL,
            stayOpened: true,
            OnSubmitCallback: function() {
                wg.waiting('open');
            }
        };
        
        wot_forms.submit_from_popup(false, '#js-auth-popup-form', '#js-auth-popup-dialog', submit_params, ext_params);
    },

    post: function(params) {

        wg.waiting('open');

        $.ajax({
            type: 'post',
            data: params.data || {},
            url:  params.url,
            dataType: 'json',
            success: function(data, status, request) {
                if (!data) {
                    wg.error(translate('FORMS_UNKNOWN_ERROR'));
                    return;
                }

                if (data.error_code == 600) {
                    wot_forms.auth({ success: function() {wot_forms.post(params); } });
                    return;
                }

                if (data.error) {
                    wg.error(data.error);
                    return;
                }

                if (params.success_replace) {
                    $(params.success_replace.hide, selector).hide();
                    $(params.success_replace.show, selector).show();
                }
                if (params.success_add_text) {
                    wot_forms.add_text_to_element(params.success_add_text.selector, params.success_add_text.params);
                }

                if (params.success) params.success(data, status, request);
            },
            error:  params.error || function(request, text, errorThrown) {
                if (window.ajax_default_error_handler != null)
                {
                    window.ajax_default_error_handler(request, text, errorThrown);
                }
                else
                {
                    wg.error(translate('FORMS_UNKNOWN_ERROR'));
                    return;
                }
            },
            complete: function() {
                wg.waiting('close');
                if (params.complete) params.complete();
                wotUpdateDateTimeFields();
            }
        });
    },

    hide_errors: function (form_selector) {
        jQuery(form_selector).removeClass('b-error-on-form');
        jQuery('.b-message-error-text', form_selector).empty();

        jQuery('.b-error-on-form-field', form_selector).removeClass('b-error-on-form-field');
        jQuery('.b-error-text', form_selector).empty();
    },

    clear_inputs: function(form_selector) {
        jQuery('input[type="password"]', form_selector).val('');
        jQuery('input[type="text"]', form_selector).val('');
    },

    get_next_iframe_number: function(){
        if (!wot_forms.__iframe_number) {
            wot_forms.__iframe_number = 0;
        }
        return ++wot_forms.__iframe_number;
    },

    submit: function(selector, params) {
        params = params || {};
        params.after_error = 'after_error' in params ? params.after_error : 'focus';
        var form = $(selector);

        var MAX_PROCESSING_TIME = 10;
        if (window.PENDING_OPERATION_JAVASCRIPT_TIMEOUT) {
            MAX_PROCESSING_TIME = window.PENDING_OPERATION_JAVASCRIPT_TIMEOUT;
        }

        var processingStartTime = undefined;

        var onFormErrorHandler = params.onFormError || wot_forms.submit_onFormError;
        var onFormError = function(error_message) {
            onFormErrorHandler(form, error_message);
        };

        var onFieldErrorHandler = params.onFieldError || wot_forms.submit_onFieldError;
        var onFieldError = function(element_id, error_message) {
            onFieldErrorHandler(element_id, form, error_message);
        };

        function set_focus(wrapper){
            window.setTimeout(function(e){
                wot_hl.SetFocus(wrapper);
            }, 1000);
        }

        var processing = false;

        var OnSuccess = function(data, status, request) {
            processing = false;

            wot_forms.hide_errors(form);
            if (!data) {
                wg.error(translate('FORMS_UNKNOWN_ERROR'));
                return;
            }

            if (data.status === 'ok') {
                if (params.success) params.success(data, status, request);

                if (params.success_replace) {
                    $(params.success_replace.hide, selector).hide();
                    $(params.success_replace.show, selector).show();
                }

                if (params.success_add_text) {
                    if (params.success_add_text.params.from_server) {
                        params.success_add_text.params.text = data.log_message;
                    }

                    wot_forms.add_text_to_element(params.success_add_text.selector,
                                                  params.success_add_text.params);
                }

                if (data.success_url) location.href=data.success_url;
                if (params.success_url) location.href=params.success_url;

                return;
            }

            if (data.status === 'warning') {
                if (params.warning) params.warning(data, status, request);
                return;
            }

            if (data.status === 'processing') {

                var date = new Date();
                if (processingStartTime === undefined) {
                    processingStartTime = date.getTime();
                }

                if (date.getTime() - processingStartTime < MAX_PROCESSING_TIME * 1000) {

                    processing = true;

                    setTimeout(function() {
                        jQuery.ajax({
                            type: 'get',
                            url:  data.status_url,
                            dataType: 'json',
                            success: OnSuccess,
                            error: OnError,
                            complete: OnComplete,
                            cache: false
                        });
                    }, 1000);

                    return;
                }

                if ('onTimeout' in params) {
                    params.onTimeout(form);
                }

                if ('stop_url' in data && data['stop_url']) {
                    // stop processing
                    jQuery.ajax({ type: 'post',
                                  url:  data.stop_url,
                                  dataType: 'json'
                                });
                }

                // form error data
                data.status = 'error';
                data.error = translate('FORMS_TIMEOUT');
            }

            if (data.status == 'error')
            {
                if (window.wotCaptcha) {
                    wotCaptcha.Reload();
                }

                if (data.error_code == 600) {
                    wot_forms.auth({ success: function() {form.submit();},
                                     OnCancel: function() {
                                         onFormError(translate('FORMS_AUTH_NOT_CONFIRMED'));
                                     }
                                   });
                    return;
                }

                if (data.error_code == 413) {
                    data.error = translate('FORMS_ERROR_413');
                    if (data.data.size_limit) {
                        var limit = data.data.size_limit;
                        var size = '' + limit + ' b';
                        if (limit > 1024) {
                            limit = limit / 1024;
                            size = limit.toFixed(2) + ' Kb';
                        }
                        if (limit > 1024) {
                            limit = limit / 1024;
                            size = limit.toFixed(2) + ' Mb';
                        }
                        data.error = translate('FORMS_ERROR_413_WITH_LIMIT').replace('%(size)i', size);
                    }
                }

                if (data.errors && data.errors.__all__ && data.errors.__all__.length > 0)
                    onFormError(data.errors.__all__[0]);
                if (data.error && data.error.length > 0)
                    onFormError(data.error);

                if (data.errors)
                    for (var field in data.errors)
                        if (field != '__all__' && data.errors[field] && data.errors[field].length > 0) {
                            var prefix = data.form_prefix? data.form_prefix + "-" : "";
                            onFieldError('id_'+prefix+field, data.errors[field][0]);
                        }
            }
            else
            {
                onFormError(translate('FORMS_UNKNOWN_ERROR'));
            }

            if (params.error_replace) {
                $(params.error_replace.hide, selector).hide();
                $(params.error_replace.show, selector).show();
            }

            if (params.success_add_text && params.success_add_text.params.from_server) {
                wot_forms.add_text_to_element(params.success_add_text.selector,
                                              {clear: true});
            }

            if (params.error) params.error(data);

            if (params.after_error == 'focus') set_focus(form);

        };

        var OnError = function(request, text, errorThrown) {
            wot_forms.hide_errors(form);
            onFormError(translate('FORMS_SERVER_UNAVAILABLE'));

            if (window.wotCaptcha) {
                wotCaptcha.Reload();
            }

            if (params.error) params.error();

            if (window.ajax_default_error_handler != null){
                window.ajax_default_error_handler(request, text, errorThrown);
            }

            if (params.after_error == 'focus') set_focus(form);
        };

        var OnComplete = function() {
            if (!processing) {
                wg.waiting('close');
                wotUpdateDateTimeFields();
            }
        };

        wg.waiting('open');

        var target = form.attr('target');
        if (target) {
            var iframe_number = wot_forms.get_next_iframe_number();
            var iframe_id = target+'-'+iframe_number;
            var iframe = jQuery('<iframe id="'+iframe_id+'" name="'+iframe_id+'" style="display:none;"></iframe>');
            iframe.appendTo(jQuery('body'));

            form.attr('target', iframe_id);

            if (params.action) {
                form.attr('action', params.action);
            }

            function ProcessIframeAnswer(dataString, params) {
                params = params || {};

                var data = undefined;
                var status = 'success';
                var request = {
                    status: 200,
                    statusText: 'iframe fake status'
                };
                try {
                    var text = dataString;
                    if (!text) return;
                    data = JSON.parse(text);
                }
                catch(err) {
                    status = 'error';
                    request.status = 404;
                    OnError(request, status, translate('FORMS_WRONG_SERVER_ANSWER'));
                    OnComplete();
                }
                if (data) {
                    OnSuccess(data, status, request);
                    OnComplete();
                }

                if (params.OnComplete) params.OnComplete();

                iframe.remove();
            }

            if (params.iframeProxy) {
                var IFRAME_PROXY = window.IFRAME_PROXY ? window.IFRAME_PROXY : "should be defined in global workspace";
                var proxy = new Porthole.WindowProxy(IFRAME_PROXY, iframe_id);
                Porthole.proxies[proxy.proxyIFrameName] = proxy;

                var EventListener = undefined;

                EventListener = function(messageEvent) {
                    ProcessIframeAnswer(messageEvent.data,
                                        {OnComplete: function(){
                                            proxy.removeEventListener(EventListener);
                                            delete Porthole.proxies[iframe_id];
                                        } } );
                };
                proxy.addEventListener(EventListener);
            }
            else {

                iframe.load(function(e){
                    var dataString = '';
                    if(jQuery('#json_data', iframe.contents()).length){
                        dataString = jQuery('#json_data', iframe.contents()).text();
                    }else{
                        dataString = jQuery('body', iframe.contents()).text();
                    }
                    ProcessIframeAnswer(dataString);
                });
            }

            return false;
        }
        else {
            var ext_data = params.ext_data || [];

            if (typeof ext_data === 'function') {
                ext_data = ext_data(selector, params);
            }

            var data = form.serializeArray();

            $.ajax({ type: 'post',
                     url:  params.action || form.attr('action'),
                     data: data.concat(ext_data),
                     dataType: 'json',
                     success: OnSuccess,
                     error: OnError,
                     complete: OnComplete
                   });
            return true;
        }
    },

    submit_onFormError: function(form, error_message) {
        var block = $('.b-message-error', form);
        if (!block.length) {
            block = $('<div class="b-message-error b-message-error__none" />').prependTo(form);
        }

        var text = $('.b-message-error-text', block);
        if (!text.length) {
            text = $('<div class="b-message-error-text" />').prependTo(block);
        }

        text.html(error_message);
        block.parents('form').addClass('b-error-on-form');
    },

    submit_onFieldError: function(element_id, form, error_message) {
        var field = $('#' + element_id, form);
        if (!field.length) {
            wot_forms.submit_onFormError(form, element_id + ': ' + error_message);
            return;
        }

        //trying to find elements for display error message
        var block = false;
        var owner = field.parent();
        for (var i = 0; i < 2; ++i) {
            block = $('.b-error', owner);
            if (block.length > 0) break;

            owner = owner.parent();
        }

        if (!block.length) {
            block = $('<div class="b-error" />');
            field.after(block);
        }

        var arrow = $('.arrow', block);
        if (!arrow.length) {
            arrow = $('<div class="arrow png"><!-- --></div>').appendTo(block);
        }

        var text = $('.b-error-text', block);
        if (!text.length) {
            text = $('<div class="b-error-text" />').appendTo(block);
        }

        text.html(error_message);
        block.parents('fieldset').addClass('b-error-on-form-field');
    },

    /*
  selector,
  params:
    text,
    clear, | boolean
  */
    add_text_to_element: function(selector, params) {
        var element = $(selector);
        if (params.clear && params.clear==true)  element.html('');
        if (params.text) element.html((element.html() != "" ? element.html() + '<br />' : '') + params.text);
    },


    // initialized dialogs on all popup_selector-s
    // wrap submit function - open modal popup with form to wich connected wot_forms.submit
    // add some wrappers to submit callbacks (success, error)
    // get all parameters which are available in submit
    // ext parameters:
    // - OnOpenCallback = function (popup_selector, form_selector, submit_params, ext_params)
    // - OnCloseCallback = function (popup_selector, form_selector, submit_params, ext_params)
    // - source - selector or url of the popup
    submit_from_popup: function(popup_selector, form_selector, dialog_id, submit_params, ext_params) {


        var src = '';
        if (ext_params.source) {
            src = ext_params.source;
        }

        var OnClosed = function (e ,ui) {
            var dialog = jQuery(dialog_id);
            var form = $(form_selector, dialog);
            if (ext_params.OnCloseCallback) {
                ext_params.OnCloseCallback(popup_selector, form_selector, submit_params, ext_params);
            }
            form.unbind();
        };


        var OnReady = function(e, ui) {

            var dialog = jQuery(dialog_id);

            var success = submit_params.success;

            var OnSuccess = function(data, textStatus, XmlHttpRequest) {
                if (success) { success(data, textStatus, XmlHttpRequest); }
                
                if (!ext_params.stayOpened) {
                    dialog.dialog('close');                    
                }
            };

            submit_params.success = OnSuccess;

            var form = $(form_selector, dialog);

            if (ext_params.OnOpenCallback) {
                ext_params.OnOpenCallback(popup_selector, form_selector, submit_params, ext_params);
            }

            wot_forms.init_countables();

            wot_hl.SetFocus(dialog);

            form.submit(function (e){
                if (ext_params.OnSubmitCallback)
                    ext_params.OnSubmitCallback();

                if (wot_forms.submit(form_selector, submit_params)) {
                    e.preventDefault();
                }
            });

            dialog.dialog( "option", "position", 'center' );

            if (ext_params.OnReady) {
                ext_params.OnReady(dialog);
            }
            if ($('.js-step').length) {
                var IE='\v'=='v';
                var stepWrap = $(this);
                if(IE) {
                setTimeout(function() {
                    wot_hl.step(stepWrap);
                }, 100);
                } else {
                    wot_hl.step($(this));
                }
            }
        };

        var dialog_params = {
            modal: true,
            open: OnReady,
            close: OnClosed,
            type: ext_params.type || "get",
            resizable: false
        };
        if(typeof(ext_params.autoOpen)) dialog_params.autoOpen = ext_params.autoOpen;

        var ShowDialog = function(e){
            //TODO: move to OnReady?
            try {
                //since src can be an url instead of selector
                jQuery(src).removeClass('js-hidden');
            }
            catch(err){}

            if (src) {
                if (typeof ext_params.source === 'function') {
                    dialog_params.url = src();
                }
                else {
                    dialog_params.url = src;
                }
            }

            if (ext_params.data) {
                if (typeof ext_params.data === 'function') {
                    dialog_params.ext_data = ext_params.data();
                }
                else {
                    dialog_params.ext_data = ext_params.data;
                }
            }

            wg.dialog(dialog_id, dialog_params);

            if (e) e.preventDefault();
        }

        if (popup_selector) {
            jQuery(popup_selector).click(ShowDialog);
        }
        else {
            ShowDialog();
        }

    },

    init_countables: function() {

          jQuery(".js-countable-input, .js-countable-field input[type=text], .js-countable-field textarea").each(
            function(idx, field) {
                jQuery(field).closest(".js-countable-field").removeClass('js-countable-field');
                jQuery(field).closest(".js-countable-input").removeClass('js-countable-input');

                var fieldset = jQuery(field).closest('fieldset');
                if (fieldset.length != 1) { alert('js-countable: fieldset not found'); return; }

                var max_value_el = jQuery('.js-countable-max-value', fieldset);
                if (max_value_el.length != 1) { alert('js-countable: max-value not specified'); return; }

                var max_value = parseInt(max_value_el.text());
                jQuery(field).attr('maxlength', max_value);
                max_value_el.text(wot_hl.Thousands(max_value));

                var curr_number = jQuery('.b-informer .number', fieldset);
                if (curr_number.length != 1) { fieldset.append('<span class="number"></span>'); }

                var onPress = function(e) {
                    var isCharacterKeyPress = function(evt) {
                        if (typeof evt.which == "undefined") {
                            // This is IE, which only fires keypress events for printable keys
                            return true;
                        } else if (typeof evt.which == "number" && evt.which > 0) {
                            // In other browsers except old versions of WebKit, evt.which is
                            // only greater than zero if the keypress is a printable key.
                            // We need to filter out backspace and ctrl/alt/meta key combinations
                            return !evt.ctrlKey && !evt.metaKey && !evt.altKey && evt.which != 8;
                        }
                        return false;
                    };
                    var value = jQuery(field).val();
                    if(!isCharacterKeyPress(e)){
                        return true;
                    }
                    if(value.length >= max_value){
                        return false;
                    }
                    return true;
                };
                var onChange = function(e){
                    var value = jQuery(field).val();
                    if(value.length > max_value){
                        value = value.substring(0, max_value);
                        jQuery(field).val(value);
                    }
                    curr_number.text( wot_hl.Thousands(max_value - jQuery(field).val().length ));
                };
                jQuery(field).change(onChange);
                jQuery(field).keyup(onChange);
                jQuery(field).keypress(onPress);
                onChange();
            });
    }
};


function InputWatcher(selector, preprocessor, onChange, postprocessor, events){
    var instance = this;
    var default_events = 'input propertychange change forceCheck';
    this.old_value = '';

    // public interfaces
    this.getValue = function(){
        return selector.val();
    };
    this.setValue = function(value, apply){
        if (typeof postprocessor === 'function') {
            value = postprocessor(value, apply, this.old_value);
        }
        selector.val(value);
        if(apply)
            instance.old_value = value;
    };
    this.restoreValue = function(){
        this.setValue(instance.old_value, false);
    };
    this.processChange = function(e){
        var value = instance.getValue();

        if(preprocessor){
            var v = preprocessor(value);
            if(v != value){
                instance.setValue(v, false);
                value = instance.getValue();
            }
        }
        if(value != instance.old_value || e.type == 'forceCheck'){
            if(onChange)
                onChange(value, instance.old_value);
            instance.old_value = value;
        }
    };
    if( typeof(events) != 'string' || events.length == 0)
    {
        events = default_events;
    }
    selector.bind(events, this.processChange);
}


function AjaxFetcher(defAjaxSettings, requestStarted, requestFinished, delay){
    var instance = this;
    var curAjax;
    var curAjaxTimer;

    function onError(XMLHttpRequest, textStatus, errorThrown){
        requestFinished(null);
        instance.cleanRequest();
    }
    function onSuccess(data, textStatus, XMLHttpRequest){
        requestFinished(data);
        instance.cleanRequest();
    }

    this.sendRequest = function(data, instant){
        instance.cancelRequest();

        var settings = {    'dataType': 'json',
                            'success': onSuccess,
                            'error': onError};

        jQuery.extend(true, settings, defAjaxSettings, {'data': data});

        function sendIt(){
            if(requestStarted)
                requestStarted(settings);

            curAjax = jQuery.ajax(settings);
        }
        if( !instant && delay && (delay > 0))
            curAjaxTimer = window.setTimeout(sendIt, delay);
        else
            sendIt();
    };

    this.cancelRequest = function(){
        if(curAjax || curAjaxTimer)
            onError();  //   cleanRequest is called from it
    };
    this.cleanRequest = function(){
        if(curAjaxTimer){
            window.clearTimeout(curAjaxTimer);
            curAjaxTimer = null;
        }

        if(curAjax){
            curAjax.abort();
            curAjax = null;
        }
    };
}

jQuery.extend(wot_forms,{
    /* returned value from static/ajax validator shoud be in form:
     * {'status': 'ok'|'error',
     *  'error': 'Optional error description',
     *  'text': 'Optional success text'}
    */
    validate_input: function(input_selector, options) {
        var defaults = {
            'preprocessor': null,
            'postprocessor': null,
            'validator': null,
            'ajaxValidator': null,
            'ajaxDelay': 0,
            'ignoreAccept': false,
            'onStateChange': null,
            'events': null
        };

        options = $.extend({}, defaults, options);

        var input = jQuery(input_selector);
        var fieldset = input.parents('fieldset:first');
        var accept = jQuery('.b-accept', fieldset);
        var decline = jQuery('.b-decline', fieldset);

        var context = {
            'input': input,
            'fieldset': fieldset
        };

        var ON_BLUR_DELAY = 200;
        var ON_SET_BLUR_CALLBACK_DELAY = 125;

        var onStateChange = options.onStateChange || function(){};
        var setState = function(states) {
            fieldset.addClass(states);
            onStateChange(context);
        };
        var clearState = function(states) {
            fieldset.removeClass(states || 'decline accept verification');
            onStateChange(context);
        };
        var hasAnyOfStates = function(states) {
            states = states.split(' ');
            for (var i in states) {
                var state = states[i];
                if (state && fieldset.hasClass(state))
                    return true;
            }

            return false;
        };

        function cleanResult(){
            clearState();
            accept.text('');
            decline.text('');
        }
        function isFailed(res){
            return (!res.status || (res.status=='error'));
        }
        function processResult(res){
            function set_text(el, text){
                if(text)
                    el.html(text);
                else
                    el.html('&nbsp;');
            }
            cleanResult();
            if(isFailed(res)){
                setState('decline');
                set_text(decline, res.error);
                return false;
            }

            if (!options.ignoreAccept) {
                setState('accept');
                set_text(accept, res.text);
            }
            return true;
        }

        function Validate(value, validateStatic, validateAjax, instant){
            if(validateStatic && options.validator){
                var res = options.validator(value);

                // we'd like to cancel request before updating ui,
                // cause it can clean our changes through callback
                var failed = isFailed(res);
                if(failed)
                    fetcher.cancelRequest();

                processResult(res);

                if(failed)
                    return; // already failed. do not need ajax
            }
            if(validateAjax && options.ajaxValidator){
                clearState('accept'); // not yet
                fetcher.sendRequest({'value': value}, instant);
            }
        }

        function onChange(value, old_value){
            if(value.length){
                Validate(value, true, true, false);
            } else{
                cleanResult();
                fetcher.cancelRequest();
            }
        }
        function onRequestStarted(settings){
            cleanResult();
            setState('verification');
        }
        function onRequestFinished(data){
            cleanResult();
            if(data)
                processResult(data);
        }
        
        // wrap in setTimeout, since we sometimes move focus in form (see submit_from_popup) right before
        // this code is executed and it cause processing an unexpecred OnBlur event in IE
        setTimeout(function() {
            input.blur(function(event) {
                setTimeout(function() {
                    if (!hasAnyOfStates('accept decline verification')) {
                        var value = watcher.getValue();

                        // AJAX validation is pointless for empty values
                        var validateAjax = value != '';
                        Validate(value, true, validateAjax, true);
                    }
                }, ON_BLUR_DELAY);
            });
        }, ON_SET_BLUR_CALLBACK_DELAY);

        var watcher = new InputWatcher(input, options.preprocessor, onChange, options.postprocessor, options.events);
        var fetcher = new AjaxFetcher(options.ajaxValidator, onRequestStarted, onRequestFinished, options.ajaxDelay);
        var submitHandler = function(event){
            if (!hasAnyOfStates('accept error decline verification'))
                Validate(watcher.getValue(), true, false, true);
            
            if (hasAnyOfStates('error decline verification')) {
                event.preventDefault();
                event.stopImmediatePropagation();
            }
        };
        input.parents('form:first').submit(submitHandler);
        input.bind('remove', function(){
            $(this).parents('form:first').unbind('submit', submitHandler);
        });
    },

    validate_input_size: function(inputSelector, params) {
        this.validate_input(inputSelector, {'validator': InputLengthValidator(inputSelector, params)});
    }
});

function InputLengthValidator(inputSelector, params) {
    params = params || {};
    var minValue = params.min;
    var maxValue = params.max;
    var required = params.required;
    var requiredErrorMsg = params.requiredErrorMsg || translate('FORMS_VALIDATION_EMPTY_FIELD_ERROR');
    var minLengthErrorMsg = params.minLengthErrorMsg || translate('FORMS_VALIDATION_MIN_LENGTH_ERROR');
    var maxLengthErrorMsg = params.maxLengthErrorMsg || translate('FORMS_VALIDATION_MAX_LENGTH_ERROR');

    minValue = minValue !== undefined ? minValue : -1;
    maxValue = maxValue !== undefined ? maxValue : jQuery(inputSelector).attr('maxlength');

    return function(value) {
        var length = value.length;
        var empty = length == 0;

        if (required && empty) {
            return {'status': 'error',
                    'error': requiredErrorMsg};
        }

        if (!empty && length < minValue)
            return {'status': 'error',
                    'error': minLengthErrorMsg};

        if (maxValue && maxValue > 0) {
            if (length > maxValue)
                return {'status': 'error',
                        'error': maxLengthErrorMsg};
        }

        return {'status': 'ok'};
    };
}

jQuery(document).ready( function() {
    wot_forms.init_countables();
});


}
/*
     FILE ARCHIVED ON 10:51:47 Dec 12, 2012 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 07:32:29 Oct 27, 2021.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 330.032
  exclusion.robots: 0.089
  exclusion.robots.policy: 0.081
  RedisCDXSource: 0.536
  esindex: 0.007
  LoadShardBlock: 311.648 (3)
  PetaboxLoader3.datanode: 321.817 (4)
  CDXLines.iter: 15.773 (3)
  load_resource: 66.585
  PetaboxLoader3.resolve: 41.243
*/